#!/usr/sbin/nft -f

flush ruleset

# Defines
# - monitoring_saddr
# - ssh_saddr
# - gw_saddr_v4
# - gw_saddr_v6
include "/mnt/nftables/defs.ruleset"

define icmp_v4_types_accept = {
  destination-unreachable,
  time-exceeded,
  echo-request,
  echo-reply,
}

define icmp_v6_types_accept = {
  destination-unreachable,
  packet-too-big,
  time-exceeded,
  echo-request,
  echo-reply,
  nd-router-advert,
  nd-router-solicit,
  nd-neighbor-solicit,
  nd-neighbor-advert,
}

define monitoring_ports = {
  9100, # node_exporter
  9314, # ic-gateway
  9315, # ic-http-lb
  9321, # certificate-issuer
}

table ip filter {
  set crowdsec         { type ipv4_addr; size 262144; flags timeout; }
  set rate_limit       { type ipv4_addr; size 262144; flags dynamic, timeout; timeout 5m; }
  set connection_limit { type ipv4_addr; size 262144; flags dynamic; }

  counter rate_limit_v4_counter {}
  counter connection_limit_v4_counter {}

  chain input {
    type filter hook input priority filter; policy drop;
    iif "lo" accept

    # Allow unrestricted access from the other gateways
    ip saddr { $gw_saddr_v4 } accept

    # Rate limiting
    ct state new add @rate_limit { ip saddr limit rate over 6000/minute burst 3000 packets } counter name rate_limit_v4_counter drop
    ct state new add @connection_limit { ip saddr ct count over 1200 } counter name connection_limit_v4_counter drop

    # Crowdsec
    ip saddr @crowdsec tcp dport { http, https } drop

    # SSH
    ct state new tcp dport { ssh } accept

    # Standard
    icmp type $icmp_v4_types_accept accept
    ct state invalid drop
    ct state { established, related } accept
    ct state new tcp dport { http, https } accept
  }

  chain forward {
    type filter hook forward priority filter; policy drop;
  }

  chain output {
    type filter hook output priority filter; policy drop;
    oif "lo" accept

    # Standard
    icmp type $icmp_v4_types_accept accept
    ct state invalid drop
    ct state { established, related } accept
    ct state new tcp dport { domain, http, https } accept
    ct state new udp dport { domain, ntp } accept
  }
}

table ip6 filter {
  set crowdsec6        { type ipv6_addr; size 262144; flags timeout; }
  set rate_limit       { type ipv6_addr; size 262144; flags dynamic, timeout; timeout 5m; }
  set connection_limit { type ipv6_addr; size 262144; flags dynamic; }

  counter rate_limit_v6_counter {}
  counter connection_limit_v6_counter {}

  chain input {
    type filter hook input priority filter; policy drop;
    iif "lo" accept

    # Allow unrestricted access from the other gateways
    ip6 saddr { $gw_saddr_v6 } accept

    # Rate limiting
    ct state new add @rate_limit { ip6 saddr limit rate over 6000/minute burst 3000 packets } counter name rate_limit_v6_counter drop
    ct state new add @connection_limit { ip6 saddr ct count over 1200 } counter name connection_limit_v6_counter drop

    # Crowdsec
    ip6 saddr @crowdsec6 tcp dport { http, https } drop

    # Standard
    icmpv6 type $icmp_v6_types_accept accept
    ct state invalid drop
    ct state { established, related } accept
    ct state new tcp dport { http, https } accept

    # SSH
    ip6 saddr { $ssh_saddr } ct state new tcp dport { ssh } accept

    # Monitoring
    ip6 saddr { ::/128, $monitoring_saddr } ct state new tcp dport $monitoring_ports accept
  }

  chain forward {
    type filter hook forward priority filter; policy drop;
  }

  chain output {
    type filter hook output priority filter; policy drop;
    oif "lo" accept

    # Standard
    icmpv6 type $icmp_v6_types_accept accept
    ct state invalid drop
    ct state { established, related } accept
    ct state new tcp dport { domain, http, https } accept
    ct state new udp dport { domain, ntp } accept
  }
}
